"""
Django settings for ras_rm_auth_service project.

Generated by 'django-admin startproject' using Django 2.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os
import logging
import cfenv

stdlogger = logging.getLogger(__name__)

DB_HOST = ''
DB_NAME = ''
DB_USERNAME = ''
DB_PASSWORD = ''
DB_PORT = '6432'

if 'VCAP_SERVICES' in os.environ:
    stdlogger.info('VCAP_SERVICES found in environment')

    cf_env = cfenv.AppEnv()
    credentials = cf_env.services[0].credentials
    DB_HOST = credentials.get('host')
    DB_NAME = credentials.get('db_name')
    DB_USERNAME = credentials.get('username')
    DB_PASSWORD = credentials.get('password')
    DB_PORT = '5432'

else:
    DB_HOST = 'localhost'
    DB_NAME = 'postgres'
    DB_USERNAME = 'postgres'
    DB_PASSWORD = 'postgres'
    stdlogger.info('VCAP_SERVICES NOT found in environment.')


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'w5$5)^(8i63sxll&^!9^jh6nw6s1im1n-o62uh=lfznla=k%ar'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', True)

ALLOWED_HOSTS = '*'

# Application definition

INSTALLED_APPS = [
    'authentication.apps.AuthenticationConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'ras_rm_auth_service.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ras_rm_auth_service.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases
db_schema = os.environ.get('DATABASE_SCHEMA', 'public')

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': f'{DB_NAME}',
        'USER': f'{DB_USERNAME}',
        'PASSWORD': f'{DB_PASSWORD}',
        'HOST': f'{DB_HOST}',
        'PORT': f'{DB_PORT}',
        'OPTIONS': {
            'options': f'-c search_path={db_schema}'
        },
    },
}

AUTH_USER_MODEL = 'authentication.User'

# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_URL = '/static/'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'formatters': {
        'simple': {
            'format': '[%(asctime)s] %(levelname)s %(message)s',
            'datefmt': '%Y-%m-%d %H:%M:%S'
        },
        'verbose': {
            'format': '[%(asctime)s] %(levelname)s [%(name)s.%(funcName)s:%(lineno)d] %(message)s',
            'datefmt': '%Y-%m-%d %H:%M:%S'
        },
        'ons': {
            'format': ' {"created":"%(asctime)s", "service":"oauth2", "level": "%(levelname)s", "event":"%(message)s", "context": "%(name)s.%(funcName)s:%(lineno)d"  }',
            'datefmt': '%Y-%m-%d %H:%M:%S '
        },

    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'filters': ['require_debug_true'],
            #'filters': [],                      # Allow all logs to pass to console
            'class': 'logging.StreamHandler',
            'formatter': 'ons'
        },
        'console_cloud_foundry': {
            'level': 'WARNING',
            'filters': ['require_debug_false'],
            'class': 'logging.StreamHandler',
            'formatter': 'ons'
        },

        'development_logfile': {
            'level': 'DEBUG',
            'filters': ['require_debug_true'],
            'class': 'logging.FileHandler',
            'filename': 'oauth2_development.log',
            'formatter': 'verbose'
        },
        'production_logfile': {
            'level': 'WARNING',
            'filters': ['require_debug_false'],
            'class': 'logging.FileHandler',
            'filename': 'oauth2_production.log',
            'formatter': 'verbose'
        },
        'remote_logfile': {
            'level': 'DEBUG',
            'filters': ['require_debug_false', 'require_debug_true'],
            'class': 'logging.FileHandler',
            'filename': 'oauth2_remote.log',
            'formatter': 'verbose'
        },
        'proj_logfile': {
            'level': 'DEBUG',
            #'filters': ['require_debug_false','require_debug_true'],
            'filters':[],                           # Allow all 'proj' related logs to be sent to this project folder
            'class': 'logging.FileHandler',
            'filename': 'oauth2_proj.log',
            'formatter': 'verbose'
        },
    },
    'loggers': {
        # This is our main log handler. It catches all logs within apps.*.*
        'apps': {
            'handlers': ['console', 'console_cloud_foundry', 'production_logfile', 'development_logfile'],
            'level': 'DEBUG',
        },
        # This defines a handler for the namespace proj.*.*
        'proj': {
            'handlers': ['console', 'console_cloud_foundry', 'development_logfile', 'proj_logfile'],
        },
        # Our remote handler is used for logging anything we want to be logged while the app is running remotely
        'remote': {
            'handlers': ['console', 'remote_logfile'],
        },
        # This is our default django handler loggs
        'django': {
            'handlers': ['console', 'development_logfile', 'production_logfile'],
        },
        # This is our default warnings log
        'py.warnings': {
            'handlers': ['console', 'development_logfile'],
        },
    }
}